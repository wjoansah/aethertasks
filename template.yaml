AWSTemplateFormatVersion: 2010-09-09
Description: >-
  aethertasks

Globals:
  Function:
    Runtime: nodejs22.x
    MemorySize: 128
    Timeout: 100
    Tracing: Active

Parameters:
  UserPoolAdminGroupName:
    Description: User pool group name for API administrators
    Type: String
    Default: apiAdmins
  DevAuthCallbackUrl:
    Type: String
    Description: Auth callback in development
    Default: http://localhost:3000
  ProdAuthCallbackUrl:
    Type: String
    Description: Auth callback in production
    Default: http://localhost:3000
  AdminEmail:
    Description: Admin email
    Type: String
Transform:
  - AWS::Serverless-2016-10-31

Resources:
  # Authorizer Function
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/authorizer.handler
      Description: Handler for Lambda authorizer
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          APP_CLIENT_ID: !Ref UserPoolClient
          ADMIN_GROUP_NAME: !Ref UserPoolAdminGroupName
      Tags:
        Stack: !Sub "${AWS::StackName}"

  # User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      UsernameAttributes:
        - email
      UserPoolTags:
        Key: Name
        Value: !Sub ${AWS::StackName} User Pool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7

  # User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        !Sub ${AWS::StackName}UserPoolClient
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      AccessTokenValidity: 6
      IdTokenValidity: 6
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - 'code'
      AllowedOAuthScopes:
        - 'email'
        - 'openid'
      CallbackURLs:
        - !Ref DevAuthCallbackUrl
        - !Ref ProdAuthCallbackUrl

  # User Pool Domain
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref UserPoolClient
      UserPoolId: !Ref UserPool

  # API Admin User Pool Group
  ApiAdministratorsUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: User group for API Administrators
      GroupName: !Ref UserPoolAdminGroupName
      Precedence: 0
      UserPoolId: !Ref UserPool

  # User Function
  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/users.handler
      Description: Handler for all users related operations
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          STATE_MACHINE_ARN: !Ref StepFunctionStateMachine
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:AdminCreateUser
              - cognito-idp:AdminSetUserPassword
              - cognito-idp:AdminListGroupsForUser
              - cognito-idp:ListUsers
            Resource: !GetAtt UserPool.Arn
        - Statement:
            Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - !GetAtt StepFunctionStateMachine.Arn
      Tags:
        Stack: !Sub "${AWS::StackName}"
      Events:
        GetUsersEvent:
          Type: Api
          Properties:
            Path: /users
            Method: get
            RestApiId: !Ref RestAPI
        PostUserEvent:
          Type: Api
          Properties:
            Path: /users/invite
            Method: post
            RestApiId: !Ref RestAPI
        GetUserEvent:
          Type: Api
          Properties:
            Path: /users/{userid}
            Method: get
            RestApiId: !Ref RestAPI

  # Rest API
  RestAPI:
    Type: AWS::Serverless::Api
    Properties:
      # todo : parameterise this
      StageName: Prod
      TracingEnabled: true
      Tags:
        Name: !Sub "${AWS::StackName}-API"
        Stack: !Sub "${AWS::StackName}"
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              Headers:
                - Authorization
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "integrationStatus": $context.integrationStatus, "integrationLatency": $context.integrationLatency, "responseLength":"$context.responseLength" }'
      MethodSettings:
        - ResourcePath: "/*"
          LoggingLevel: INFO
          HttpMethod: "*"
          DataTraceEnabled: True


  ApiLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayAccountLoggingSettings:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiLoggingRole.Arn

  AccessLogs:
    Type: AWS::Logs::LogGroup
    DependsOn: ApiLoggingRole
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/${AWS::StackName}/APIAccessLogs"

  # Task Table
  TaskTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TaskTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: responsibility
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      GlobalSecondaryIndexes:
        - IndexName: ResponsibilityIndex
          KeySchema:
            - AttributeName: responsibility
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # Create Task Function
  CreateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/tasks/create.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TaskTable
      Environment:
        Variables:
          TASK_TABLE_NAME: !Ref TaskTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tasks
            Method: POST
            RestApiId: !Ref RestAPI

  # Create Task Function
  UpdateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/tasks/update.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TaskTable
      Environment:
        Variables:
          TASK_TABLE_NAME: !Ref TaskTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tasks/{id}
            Method: PUT
            RestApiId: !Ref RestAPI

  # Get Tasks Function
  GetTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/tasks/getTasks.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TaskTable
      Environment:
        Variables:
          TASK_TABLE_NAME: !Ref TaskTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tasks
            Method: GET
            RestApiId: !Ref RestAPI

  # Get My Tasks Function
  GetMyTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/tasks/getMyTasks.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TaskTable
      Environment:
        Variables:
          TASK_TABLE_NAME: !Ref TaskTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tasks/myTasks
            Method: GET
            RestApiId: !Ref RestAPI


  # Complete Task Function
  CompleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/tasks/completeTask.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TaskTable
      Environment:
        Variables:
          TASK_TABLE_NAME: !Ref TaskTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tasks/complete
            Method: PUT
            RestApiId: !Ref RestAPI

  StackCompletionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/stackCompletion.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:UpdateUserPool
              - cognito-idp:AdminCreateUser
              - cognito-idp:AdminAddUserToGroup
              - cognito-idp:AdminGetUser
            Resource: !GetAtt UserPool.Arn
        - Statement:
            Effect: Allow
            Action:
              - sns:Subscribe
            Resource:
              - !Ref CompletedTaskNotificationTopic
              - !Ref ClosedTasksNotificationTopic

  StackCustomResource:
    Type: Custom::StackCustomResource
    Properties:
      ServiceToken: !GetAtt StackCompletionFunction.Arn
      ServiceTimeout: 30
      UserPoolId: !Ref UserPool
      UserPoolDomain: !Ref UserPoolDomain
      UserPoolClient: !Ref UserPoolClient
      ProdFrontendUrl: !Ref ProdAuthCallbackUrl
      Region: !Ref AWS::Region
      AdminEmail: !Ref AdminEmail
      AdminGroup: !Ref UserPoolAdminGroupName
      TaskCompleteTopicArn: !Ref CompletedTaskNotificationTopic
      ClosedTaskTopicArn: !Ref ClosedTasksNotificationTopic

  # Task Queue
  TaskQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 120
      QueueName: TaskQueue

  # Task Assigned Notification Topic
  TasksAssignedNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TasksAssignedNotificationTopic

  # Task Deadline Notification Topic
  TasksDeadlineNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TasksDeadlineNotificationTopic

  # Closed Task Notification Topic
  ClosedTasksNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ClosedTasksNotificationTopic

  # Reopened Task Notification Topic
  ReopenedTasksNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ReopenedTasksNotificationTopic

  # Task Completed Notification Topic
  CompletedTaskNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: CompletedTaskNotificationTopic

  # Task Stream Processor
  TaskStreamProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/notifications/taskStreamProcessor.handler
      Policies:
        - DynamoDBStreamReadPolicy:
            TableName: TaskTable
            StreamName: !Select [ 3, !Split [ "/", !GetAtt TaskTable.StreamArn ] ]
        - SQSSendMessagePolicy:
            QueueName: !GetAtt TaskQueue.QueueName
      Environment:
        Variables:
          TASK_QUEUE_URL: !Ref TaskQueue
      Events:
        DynamoDBStreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt TaskTable.StreamArn
            StartingPosition: LATEST

  # Task Queue Processor
  TaskQueueProcessor:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/notifications/taskQueueProcessor.handler
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt TaskQueue.QueueName
        - SNSPublishMessagePolicy:
            TopicName: !Ref TasksAssignedNotificationTopic
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - sns:Publish
              - sns:ListSubscriptionsByTopic
              - sns:GetSubscriptionAttributes
              - sns:SetSubscriptionAttributes
            Resource:
              - !Ref ClosedTasksNotificationTopic
              - !Ref TasksAssignedNotificationTopic
              - !Ref ReopenedTasksNotificationTopic
              - !Ref CompletedTaskNotificationTopic
      Environment:
        Variables:
          TASK_ASSIGNED_TOPIC_ARN: !Ref TasksAssignedNotificationTopic
          TASK_CLOSED_TOPIC_ARN: !Ref ClosedTasksNotificationTopic
          REOPENED_TASK_TOPIC_ARN: !Ref ReopenedTasksNotificationTopic
          TASK_COMPLETED_ARN: !Ref CompletedTaskNotificationTopic
      Events:
        QueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TaskQueue.Arn
            BatchSize: 10

  # Subscribe to SNS Topics
  SubscribeToSNSTopicFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/notifications/subscribeToSNSTopics.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - sns:Subscribe
            Resource:
              - !Ref TasksAssignedNotificationTopic
              - !Ref TasksDeadlineNotificationTopic
              - !Ref ClosedTasksNotificationTopic
              - !Ref ReopenedTasksNotificationTopic

  # Send Deadline Notification Function
  SendDeadlineNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/notifications/sendDeadlineNotification.handler
      Environment:
        Variables:
          TASK_TABLE_NAME: !Ref TaskTable
          TASK_DEADLINE_TOPIC_ARN: !Ref TasksDeadlineNotificationTopic
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - sns:Publish
              - sns:ListSubscriptionsByTopic
              - sns:GetSubscriptionAttributes
              - sns:SetSubscriptionAttributes
            Resource:
              - !Ref TasksDeadlineNotificationTopic
      Events:
        TaskDeadlineEvent:
          Type: Schedule
          Properties:
            Schedule: rate(10 minutes)
            Input: "{}"

  # Check expired tasks
  CheckExpiredTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/notifications/checkExpiredTasks.handler
      Environment:
        Variables:
          TASK_TABLE_NAME: !Ref TaskTable
          STATE_MACHINE_ARN: !Ref StepFunctionStateMachine
          ADMIN_EMAIL: !Ref AdminEmail
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - "dynamodb:Scan"
            Resource:
              - !GetAtt TaskTable.Arn
        - Statement:
            Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - !GetAtt StepFunctionStateMachine.Arn
      Events:
        TaskExpiredEvent:
          Type: Schedule
          Properties:
            Schedule: rate(10 minutes)
            Input: "{}"

  ExpireTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/notifications/checkExpiredTasks.handler
      Environment:
        Variables:
          TASK_TABLE_NAME: !Ref TaskTable
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - "dynamodb:UpdateItem"
            Resource:
              - !GetAtt TaskTable.Arn

  SendExpirationNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/notifications/sendExpirationNotification.handler
      Environment:
        Variables:
          TASK_CLOSED_TOPIC_ARN: !Ref ClosedTasksNotificationTopic
          ADMIN_EMAIL: !Ref AdminEmail
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - sns:Publish
              - sns:ListSubscriptionsByTopic
              - sns:GetSubscriptionAttributes
              - sns:SetSubscriptionAttributes
            Resource:
              - !Ref ClosedTasksNotificationTopic

  # Step Function Role
  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: SNSSubscribePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt SubscribeToSNSTopicFunction.Arn
                  - !GetAtt UpdateTaskFunction.Arn
                  - !GetAtt SendDeadlineNotificationFunction.Arn

  # Step Function State Machine
  StepFunctionStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub ${AWS::StackName}-StepFunctionStateMachine
      RoleArn: !GetAtt StepFunctionsRole.Arn
      DefinitionString: !Sub |
        {
          "StartAt": "DetermineWorkflow",
          "States": {
            "DetermineWorkflow": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.workflowType",
                  "StringEquals": "onboarding",
                  "Next": "SubscribeToSNS"
                },
                {
                  "Variable": "$.workflowType",
                  "StringEquals": "taskDeadline",
                  "Next": "HandleTaskDeadline"
                }
              ],
              "Default": "FailState"
            },
            "SubscribeToSNS": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "SubscribeToTasksAssignedTopic",
                  "States": {
                    "SubscribeToTasksAssignedTopic": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SubscribeToSNSTopicFunction}",
                      "Parameters": {
                        "TopicArn": "${TasksAssignedNotificationTopic}",
                        "Email.$": "$.userEmail"
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "SubscribeToTasksDeadlineTopic",
                  "States": {
                    "SubscribeToTasksDeadlineTopic": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SubscribeToSNSTopicFunction}",
                      "Parameters": {
                        "TopicArn": "${TasksDeadlineNotificationTopic}",
                        "Email.$": "$.userEmail"
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "SubscribeToClosedTasksTopic",
                  "States": {
                    "SubscribeToClosedTasksTopic": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SubscribeToSNSTopicFunction}",
                      "Parameters": {
                        "TopicArn": "${ClosedTasksNotificationTopic}",
                        "Email.$": "$.userEmail"
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "SubscribeToReopenedTasksTopic",
                  "States": {
                    "SubscribeToReopenedTasksTopic": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SubscribeToSNSTopicFunction}",
                      "Parameters": {
                        "TopicArn": "${ReopenedTasksNotificationTopic}",
                        "Email.$": "$.userEmail"
                      },
                      "End": true
                    }
                  }
                }
              ],
              "Next": "SuccessState"
            },
            "HandleTaskDeadline": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "ExpireTask",
                  "States": {
                    "ExpireTask": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ExpireTaskFunction}",
                      "Parameters": {
                        "TaskId.$": "$.taskId",
                        "Status": "Expired"
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "SendExpirationNotification",
                  "States": {
                    "SendExpirationNotification": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SendExpirationNotificationFunction}",
                      "Parameters": {
                        "TopicArn": "${ClosedTasksNotificationTopic}",
                        "TaskId.$": "$.taskId",
                        "Responsibility.$": "$.responsibility"
                      },
                      "End": true
                    }
                  }
                }
              ],
              "Next": "SuccessState"
            },
            "SuccessState": {
              "Type": "Succeed"
            },
            "FailState": {
              "Type": "Fail",
              "Error": "InvalidWorkflowType",
              "Cause": "The workflow type provided is not supported."
            }
          }
        }


Outputs:
  APIEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  UserPool:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClient:
    Description: Cognito User Pool Application Client ID
    Value: !Ref UserPoolClient

  UserPoolAdminGroupName:
    Description: User Pool group name for API administrators
    Value: !Ref UserPoolAdminGroupName

  CognitoLoginURL:
    Description: Cognito User Pool Application Client Hosted Login UI URL
    Value: !Sub 'https://${UserPoolClient}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&redirect_uri=http://localhost'

  CognitoAuthCommand:
    Description: AWS CLI command for Amazon Cognito User Pool authentication
    Value: !Sub 'aws cognito-idp initiate-auth --auth-flow USER_PASSWORD_AUTH --client-id ${UserPoolClient} --auth-parameters USERNAME=<username>,PASSWORD=<password>'

  TaskTable:
    Description: Tasks Table
    Value: !Ref TaskTable
